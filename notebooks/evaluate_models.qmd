---
title: "Analyse TFPred-AR-Prostate Performance"
author: "Temi"
date: 'Mon Jun 12 2023'
date-modified: 'Tue Aug 15 2023'
fig-format: svg
---

```{r message=F, warning=F}
library(glue)
library(GenomicRanges)
library(R.utils)
library(data.table)
library(tidyverse)
library(ROCR)
library(glmnet)
library(pROC)
library(rjson)
```
```{r import libraries}
#rm(list=ls())
root_dir <- '/project2/haky/temi/projects/TFPred-snakemake'
```

```{r}
 # /project2/haky/temi/projects/TFPred-snakemake/metadata
```

Metadata
```{r}
mtdt <- data.table::fread(glue('{root_dir}/metadata/valid_TFs.csv'))
mtdt
```

```{r}
tfs <- mtdt$assay
tissues <- mtdt$context %>% gsub(' ', '-', .)
tfs_tissues <- paste(tfs, tissues, sep='_')
tfs_tissues
```

```{r}
rundate <- "2024-05-10" #"2024-04-18" #'2023-11-14'
one_ex <- paste(, glue('/project2/haky/temi/projects/TFPred-snakemake/cistrome_{output/models_eval/cistrome_{tfs_tissues}_{rundate}/aggByCollect_{tfs_tissues}.logistic.test_eval.txt.gz') #%>% data.table::fread()
```

```{r}
models_path <- list()
for(i in c(1,2,3,7,14)){
  m <- glue('/project2/haky/temi/projects/TFPred-snakemake/data/cistrome_{i}_{rundate}/models/cistrome_{i}_{tfs_tissues}_{rundate}/aggByCollect_{tfs_tissues}.logistic.rds')
  
  if(file.exists(m)){
    mname <- paste0('AR_Prostate_', i)
    models_path[[mname]] <- m
  }
}
```

```{r}
ct <- cbind(names(models_path), unlist(models_path))
colnames(ct) <- c('model', 'path')

data.table::fwrite(ct, "/project2/haky/temi/projects/enpact-predict-snakemake/metadata/enpact_5_models.txt", sep = '\t', row.names = F, col.names=T, quote = F)
```

```{r}
transcription_factor <- 'AR'
evals <- list()
ci_low <- list()
ci_high <- list()
for(i in c(1,2,3,7,14)){
  m <- glue('/project2/haky/temi/projects/TFPred-snakemake/data/cistrome_{i}_{rundate}/models_eval/cistrome_{i}_{tfs_tissues}_{rundate}/aggByCollect_{tfs_tissues}.logistic.test_eval.txt.gz')
  
  if(file.exists(m)){
    print(m)

    dt <- data.table::fread(m)
    roc_object <- pROC::roc(dt$binding_class, dt$TFPred_score, quiet = T)
    ci_object <- pROC::ci.auc(dt$binding_class, dt$TFPred_score, conf.level = 0.95, quiet = T)
    pp_ci <- as.numeric(ci_object)
    print(pp_ci)
    evals[[`i`]] <- pROC::auc(roc_object)[1]
    # pp_ci <- with(dt, pROC::ci.auc(binding_class, TFPred_score, conf.level = 0.95, quiet = T)) |> as.numeric() 
    #pp_auc <- pp$auc |> as.numeric() |> round(3)
    #pp_var <- pROC::var(pp)|> as.numeric()
    # pp_ci <- with(dt, pROC::ci.auc(binding_class, TFPred_score, conf.level = 0.95, quiet = T)) |> as.numeric() 
    #evals[[`i`]] <- pp_ci[2]
    ci_low[[`i`]] <- pp_ci[1]
    ci_high[[`i`]] <- pp_ci[3]
  }
}
res <- lapply(list(evals, ci_low, ci_high), function(ea){
  Filter(Negate(is.null), ea) |> unlist()
}) %>% do.call('cbind', .)


# names(evals) <- c(1, 2, 3, 7, 14)
# evals <- Filter(Negate(is.null), evals)
```

```{r}
bp <- barplot(unlist(evals), names.arg = names(evals), col = c("lightblue", "mistyrose", "lavender"), legend = c("1 sample", "2 samples", "3 samples"), xlab = 'Number of Sample used to define motifs', ylab = 'AUC on Test set')
text(bp, 0.2, round(unlist(evals), 3), cex=1, pos=3)
```

```{r}
plot(res[,2], type = 'b', col = c("black"), xlab = 'Number of Sample used to define motifs', ylab = 'AUC on Test set', ylim = c(0.85, 0.95), bg = 'red', pch = 21, xaxt = 'n')
axis(1, at = 1:5, labels = c(1,2,3,7,14))
text(1:5, res[,2] + 0.005, round(res[,2], 3), cex=1, pos=3)
# lines(res[, 1], type = 'b', bg = 'red', pch = 21)
# lines(res[, 3], type = 'b', bg = 'red', pch = 21)
```

```{r}
rundate <- "2024-05-10" #"2024-04-18" #'2023-11-14'
one_ex <- glue('/project2/haky/temi/projects/TFPred-snakemake/output/models_eval/cistrome_{tfs_tissues}_{rundate}/aggByCollect_{tfs_tissues}.logistic.test_eval.txt.gz') %>% data.table::fread()

roc_object <- pROC::roc(one_ex$binding_class, one_ex$TFPred_score)
pROC::auc(roc_object)[1]
```

```{r}
#rundate <- '2023-11-14'
evaluations <- lapply(tfs_tissues, function(each_tft){
  one_ex <- glue('/project2/haky/temi/projects/TFPred-snakemake/output/models_eval/cistrome_{each_tft}_{rundate}/aggByCollect_{each_tft}.logistic.test_eval.txt.gz') #|> Sys.glob()
  print(one_ex)
  if(file.exists(one_ex)){
    one_ex <- data.table::fread(one_ex)
    tryCatch({
      roc_object <- pROC::roc(one_ex$binding_class, one_ex$probability)
      return(pROC::auc(roc_object)[1])
    }, 
    error = function(con){
      return(NULL)
    })
  }
})

names(evaluations) <- tfs_tissues
evaluations <- Filter(Negate(is.null), evaluations)
#evaluations <- do.call('cbind', evaluations)
evaluations
```

```{r}
do.call('rbind', evaluations) %>%
  as.data.frame() %>%
  tibble::rownames_to_column('tf_tissue') %>%
  dplyr::rename(AUC=V1) %>%
  dplyr::arrange(desc(AUC)) %>%
  dplyr::mutate(tf_tissue = factor(tf_tissue, levels=tf_tissue)) %>%
  ggplot(aes(x=tf_tissue, y=AUC)) +
  geom_point() +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8, angle = 90))
```

### Predict one with many

```{r}
mtdt
```

```{r}
test_model <- '/project2/haky/temi/projects/TFPred-snakemake/output/models/cistrome_CDX2_Colon_2023-11-14/aggByCollect_CDX2_Colon.logistic.rds' |> readRDS()
```

```{r}
# get the test data in a list
test_list <- lapply(tfs_tissues, function(each_tft){
  test_file <- glue('/project2/haky/temi/projects/TFPred-snakemake/data/aggregation_folder/test_cistrome_aggByCollect_{each_tft}.prepared.csv.gz')
  if(file.exists(test_file)){
    return(test_file)
  }
})
names(test_list) <- tfs_tissues
test_list <- Filter(Negate(is.null), test_list)
test_list
```

```{r}
other_evaluations <- lapply(test_list, function(eachtest){
    # read in the newx data : train or test
    mat_dt <- data.table::fread(eachtest)
    newx <- as.matrix(mat_dt[, -c(1:3)])
    # you only need one : link
    link_pred <- predict(test_model, newx, s = "lambda.1se", type = 'link') |> as.vector()
    response_pred <- predict(test_model, newx, s = "lambda.1se", type = 'response') |> as.vector()
    df <- mat_dt[, c(1:3)] |> as.data.frame()
    df$TFPred_score <- link_pred
    df$probability <- response_pred
    colnames(df) <- c('locus', 'binding_class', 'binding_count', 'TFPred_score', 'probability')
    roc_object <- pROC::roc(df$binding_class, df$probability)
    return(pROC::auc(roc_object)[1])
})  
```

```{r}

# Add extra space to right of plot area; change clipping to figure
par(mar=c(5.1, 4.1, 4.1, 15.1), xpd=TRUE)

tt <- merge(
  do.call('rbind', evaluations),
  do.call('rbind', other_evaluations),
  by='row.names'
) 
colnames(tt) <- c('tf_tissue', 'self_eval', 'other_eval')
rownames(tt) <- tt[, 'tf_tissue']
tt[, 'tf_tissue'] <- NULL
tt <- tt %>% t()
x <- barplot(tt, beside=T, 
  ylab='AUC', xlab='TF-tissue model', col=adjustcolor(c('green', 'red'), alpha.f = 0.6), 
  cex.lab=1, names.arg=colnames(tt))
text(x, par("usr")[3] - 0.03, cex=0.9, labels = colnames(tt), xpd=F, srt=15)
text(x, tt[, ] - 0.1, labels=round(tt[, ], 3),cex=0.8)
mtext('AUCs of different models evaluated on respective test sets as well as on others', side = 3, line = 1, outer = FALSE, at = NA, adj = 0, padj = NA, cex = 1.5)
legend('topright', 
  legend=c('model self-evaluation on test set', 'CDX2_Colon model on other test sets'),
  fill=adjustcolor(c('green', 'red'), alpha.f = 0.6),
  inset=c(-0.25,0), bty = "n")
```



```{r}
other_metrics <- lapply(other_evaluations, function(each_dt){
  
})

names(other_metrics) <- names(other_evaluations)
#evaluations <- do.call('cbind', evaluations)
other_metrics
```

```{r}
dt_types <- c('train_eval', 'test_eval')
one_ex <- purrr::map(dt_types, function(each_dt){
  data.table::fread(glue('{root_dir}/output/models_eval/cistrome_AR_Prostate_2023-08-10/aggByCollect_AR_Prostate.logistic.{each_dt}.txt.gz'))
})
names(one_ex) <- dt_types
```



AUROC curve
```{r}
pp_test <- with(one_ex$test_eval, prediction(TFPred_score, binding_class))
pp_train <- with(one_ex$train_eval, prediction(TFPred_score, binding_class))
perf_test <- performance(pp_test, "tpr", "fpr")
perf_train <- performance(pp_train, 'tpr', 'fpr')
auc_test <- performance(pp_test, measure = "auc")
auc_test <- auc_test@y.values[[1]] |> round(3)
auc_train <- performance(pp_train, measure = "auc")
auc_train <- auc_train@y.values[[1]] |> round(3)
```

```{r}
# dt <- data.frame('train'=auc_train, 'test'=auc_test) %>% t() %>% as.data.frame()
# colnames(dt) <- 'auc'
# barplot(height=dt$auc, names=rownames(dt), space=0.1, width=0.01)
```

```{r fig.height=8, fig.width=8}
par(mar = c(5, 5, 5, 5))
plot(perf_test, frame.plot=F, col='red', cex.lab=1.5,)
plot(perf_train, add=T, col='blue')
legend(0.6, 0.5, legend=c(paste("train AUC:", auc_train), paste("test AUC", auc_test)),
  col=c("blue", "red"), lty=c(1), bty='n')
```

AUPRC curve
```{r}
pp_test <- with(one_ex$test_eval, prediction(TFPred_score, binding_class))
pp_train <- with(one_ex$train_eval, prediction(TFPred_score, binding_class))
perf_test <- performance(pp_test, "prec", "rec")
perf_train <- performance(pp_train, 'prec', 'rec')
auc_test <- performance(pp_test, measure = "aucpr")
auc_test <- auc_test@y.values[[1]] |> round(3)
auc_train <- performance(pp_train, measure = "aucpr")
auc_train <- auc_train@y.values[[1]] |> round(3)
```

```{r fig.height=8, fig.width=8}
par(mar = c(5, 5, 5, 5))
plot(perf_test, frame.plot=F, col='red', cex.lab=1.5,)
plot(perf_train, add=T, col='blue')
legend(0.6, 0.6, legend=c(paste("train PR:", auc_train), paste("test PR", auc_test)),
  col=c("blue", "red"), lty=c(1), bty='n')
```

```{r}
# evaluations <- lapply(tfs_tissues, function(each_tft){
#   one_ex <- glue('/project2/haky/temi/projects/TFPred-snakemake/output/models_eval/cistrome_AR_Breast_2023-07-27/aggByCollect_AR_Breast.logistic.rds') |> Sys.glob()
#   one_ex <- readRDS(one_ex)
#   roc_object <- roc(one_ex[[1]]$class, one_ex[[1]]$prediction_response)
#   auc(roc_object)[1]
# })

# names(evaluations) <- tfs_tissues
# evaluations <- do.call('cbind', evaluations)
# evaluations
```

```{r}
# x <- barplot(evaluations, horiz=FALSE, xaxt = "n", col='steelblue', ylab='AUC', xlab='TF-tissue model', cex.lab=1, )
# text(x, par("usr")[3] - 0.03, cex=0.9, labels = colnames(evaluations), xpd=TRUE, srt=15)
# text(x, evaluations[1, ] - 0.1, labels=round(evaluations[1, ], 3),cex=0.8)
# mtext('AUCs of different models evaluated on respective test sets', side = 3, line = 1, outer = FALSE, at = NA, adj = 0, padj = NA, cex = 1.5)

```



```{r}
enpact_mat <- readRDS("/project2/haky/temi/projects/enpact-predict-snakemake/output/baca_2024-03-28/baca_2024-03-28.enpact_scores.array.rds.gz")[, , 'AR_Prostate']
enpact_mat[1:5, 1:5]
```

```{r}
data_dir <- "/project2/haky/temi/projects/TFPred-figures/data"
cwas_mat <- data.table::fread(file.path(data_dir, 'cwas_scores_cwas_individuals.txt.gz')) %>% tibble::column_to_rownames('V1')
cwas_mat[1:5, 1:5]
```

```{r}
common_loci <- intersect(rownames(enpact_mat), rownames(cwas_mat))
common_ids <- intersect(colnames(enpact_mat), colnames(cwas_mat))
# reorder by names
enpact_mat <- enpact_mat[common_loci, common_ids]
cwas_mat <- cwas_mat[common_loci, common_ids]
```

```{r}
# with help from Haky
cor2pval <- function(cc,nn) {
  zz = atanh(cc) * sqrt(nn-3)
  pnorm(-abs(zz))*2
}

nterms <- nrow(t(cwas_mat))
nterms
```


```{r}
correlation_test <- apply(scale(t(enpact_mat)) * scale(t(cwas_mat)), 2, sum)/nterms
test_pvalues <- cor2pval(correlation_test, nterms) #%>% p.adjust("fdr")
df_cor_test <- cbind(p_value=test_pvalues, r=correlation_test) 
rownames(df_cor_test) <- names(test_pvalues)
df_cor_test <- df_cor_test %>% 
    as.data.frame() %>% 
    dplyr::arrange(p_value, desc(abs(r)))

df_cor_test[1:5, ]
```


```{r}
data.table::fwrite(df_cor_test, glue('{data_dir}/enpact_vs_cwas_scores.correlation_test.txt.gz'), sep='\t', compress =  'gzip', quote=F, row.names=T, col.names=T)
```


```{r}
et <- data.table::fread('/project2/haky/temi/projects/l-TFPred/data/tfpred_scores/aggByCollect_AR_Prostate_1KG.logistic.txt.gz')
```


```{r}
enpact_scores_db <- readRDS('/project2/haky/temi/projects/enpact-predict-snakemake/output/1KG_2024-04-23/1KG_2024-04-23.enpact_scores.array.rds.gz')[,,'AR_Prostate'] %>% as.data.frame() %>% tibble::rownames_to_column('NAME')

enpact_scores_db[1:5, 1:5]
```


```{r}
data.table::fwrite(enpact_scores_db, file = "/project2/haky/temi/projects/lEnpact/data/tfpred_scores/1KG_EUR.enpact_scores.txt", sep='\t', row.names = F, col.names=T, quote = F)
```