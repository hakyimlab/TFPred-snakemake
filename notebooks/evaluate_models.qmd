---
title: "Analyse TFPred-AR-Prostate Performance"
author: "Temi"
date: 'Mon Jun 12 2023'
date-modified: 'Tue Aug 15 2023'
fig-format: svg
---

```{r import libraries}
#rm(list=ls())
root_dir <- '/project2/haky/temi/projects/TFPred-snakemake'
```

```{r message=F, warning=F}
library(glue)
library(GenomicRanges)
library(R.utils)
library(data.table)
library(tidyverse)
library(ROCR)
library(glmnet)
library(pROC)
library(rjson)
```


```{r}
 # /project2/haky/temi/projects/TFPred-snakemake/metadata
```

Metadata
```{r}
mtdt <- data.table::fread(glue('{root_dir}/metadata/valid_TFs.csv'))
mtdt
```

```{r}
tfs <- mtdt$assay
tissues <- mtdt$context %>% gsub(' ', '-', .)
tfs_tissues <- paste(tfs, tissues, sep='_')
tfs_tissues
```

```{r}
rundate <- '2023-11-14'
evaluations <- lapply(tfs_tissues, function(each_tft){
  one_ex <- glue('/project2/haky/temi/projects/TFPred-snakemake/output/models_eval/cistrome_{each_tft}_{rundate}/aggByCollect_{each_tft}.logistic.test_eval.txt.gz') #|> Sys.glob()
  print(one_ex)
  if(file.exists(one_ex)){
    one_ex <- data.table::fread(one_ex)
    tryCatch({
      roc_object <- pROC::roc(one_ex$binding_class, one_ex$probability)
      return(pROC::auc(roc_object)[1])
    }, 
    error = function(con){
      return(NULL)
    })
  }
})

names(evaluations) <- tfs_tissues
evaluations <- Filter(Negate(is.null), evaluations)
#evaluations <- do.call('cbind', evaluations)
evaluations
```

```{r}
do.call('rbind', evaluations) %>%
  as.data.frame() %>%
  tibble::rownames_to_column('tf_tissue') %>%
  dplyr::rename(AUC=V1) %>%
  dplyr::arrange(desc(AUC)) %>%
  dplyr::mutate(tf_tissue = factor(tf_tissue, levels=tf_tissue)) %>%
  ggplot(aes(x=tf_tissue, y=AUC)) +
  geom_point() +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8, angle = 90))
```

### Predict one with many

```{r}
mtdt
```

```{r}
test_model <- '/project2/haky/temi/projects/TFPred-snakemake/output/models/cistrome_CDX2_Colon_2023-11-14/aggByCollect_CDX2_Colon.logistic.rds' |> readRDS()
```

```{r}
# get the test data in a list
test_list <- lapply(tfs_tissues, function(each_tft){
  test_file <- glue('/project2/haky/temi/projects/TFPred-snakemake/data/aggregation_folder/test_cistrome_aggByCollect_{each_tft}.prepared.csv.gz')
  if(file.exists(test_file)){
    return(test_file)
  }
})
names(test_list) <- tfs_tissues
test_list <- Filter(Negate(is.null), test_list)
test_list
```

```{r}
other_evaluations <- lapply(test_list, function(eachtest){
    # read in the newx data : train or test
    mat_dt <- data.table::fread(eachtest)
    newx <- as.matrix(mat_dt[, -c(1:3)])
    # you only need one : link
    link_pred <- predict(test_model, newx, s = "lambda.1se", type = 'link') |> as.vector()
    response_pred <- predict(test_model, newx, s = "lambda.1se", type = 'response') |> as.vector()
    df <- mat_dt[, c(1:3)] |> as.data.frame()
    df$TFPred_score <- link_pred
    df$probability <- response_pred
    colnames(df) <- c('locus', 'binding_class', 'binding_count', 'TFPred_score', 'probability')
    roc_object <- pROC::roc(df$binding_class, df$probability)
    return(pROC::auc(roc_object)[1])
})  
```

```{r}

# Add extra space to right of plot area; change clipping to figure
par(mar=c(5.1, 4.1, 4.1, 15.1), xpd=TRUE)

tt <- merge(
  do.call('rbind', evaluations),
  do.call('rbind', other_evaluations),
  by='row.names'
) 
colnames(tt) <- c('tf_tissue', 'self_eval', 'other_eval')
rownames(tt) <- tt[, 'tf_tissue']
tt[, 'tf_tissue'] <- NULL
tt <- tt %>% t()
x <- barplot(tt, beside=T, 
  ylab='AUC', xlab='TF-tissue model', col=adjustcolor(c('green', 'red'), alpha.f = 0.6), 
  cex.lab=1, names.arg=colnames(tt))
text(x, par("usr")[3] - 0.03, cex=0.9, labels = colnames(tt), xpd=F, srt=15)
text(x, tt[, ] - 0.1, labels=round(tt[, ], 3),cex=0.8)
mtext('AUCs of different models evaluated on respective test sets as well as on others', side = 3, line = 1, outer = FALSE, at = NA, adj = 0, padj = NA, cex = 1.5)
legend('topright', 
  legend=c('model self-evaluation on test set', 'CDX2_Colon model on other test sets'),
  fill=adjustcolor(c('green', 'red'), alpha.f = 0.6),
  inset=c(-0.25,0), bty = "n")
```








```{r}
other_metrics <- lapply(other_evaluations, function(each_dt){
  
})

names(other_metrics) <- names(other_evaluations)
#evaluations <- do.call('cbind', evaluations)
other_metrics
```

```{r}
dt_types <- c('train_eval', 'test_eval')
one_ex <- purrr::map(dt_types, function(each_dt){
  data.table::fread(glue('{root_dir}/output/models_eval/cistrome_AR_Prostate_2023-08-10/aggByCollect_AR_Prostate.logistic.{each_dt}.txt.gz'))
})
names(one_ex) <- dt_types
```



AUROC curve
```{r}
pp_test <- with(one_ex$test_eval, prediction(TFPred_score, binding_class))
pp_train <- with(one_ex$train_eval, prediction(TFPred_score, binding_class))
perf_test <- performance(pp_test, "tpr", "fpr")
perf_train <- performance(pp_train, 'tpr', 'fpr')
auc_test <- performance(pp_test, measure = "auc")
auc_test <- auc_test@y.values[[1]] |> round(3)
auc_train <- performance(pp_train, measure = "auc")
auc_train <- auc_train@y.values[[1]] |> round(3)
```

```{r}
# dt <- data.frame('train'=auc_train, 'test'=auc_test) %>% t() %>% as.data.frame()
# colnames(dt) <- 'auc'
# barplot(height=dt$auc, names=rownames(dt), space=0.1, width=0.01)
```

```{r fig.height=8, fig.width=8}
par(mar = c(5, 5, 5, 5))
plot(perf_test, frame.plot=F, col='red', cex.lab=1.5,)
plot(perf_train, add=T, col='blue')
legend(0.6, 0.5, legend=c(paste("train AUC:", auc_train), paste("test AUC", auc_test)),
  col=c("blue", "red"), lty=c(1), bty='n')
```

AUPRC curve
```{r}
pp_test <- with(one_ex$test_eval, prediction(TFPred_score, binding_class))
pp_train <- with(one_ex$train_eval, prediction(TFPred_score, binding_class))
perf_test <- performance(pp_test, "prec", "rec")
perf_train <- performance(pp_train, 'prec', 'rec')
auc_test <- performance(pp_test, measure = "aucpr")
auc_test <- auc_test@y.values[[1]] |> round(3)
auc_train <- performance(pp_train, measure = "aucpr")
auc_train <- auc_train@y.values[[1]] |> round(3)
```

```{r fig.height=8, fig.width=8}
par(mar = c(5, 5, 5, 5))
plot(perf_test, frame.plot=F, col='red', cex.lab=1.5,)
plot(perf_train, add=T, col='blue')
legend(0.6, 0.6, legend=c(paste("train PR:", auc_train), paste("test PR", auc_test)),
  col=c("blue", "red"), lty=c(1), bty='n')
```

```{r}
# evaluations <- lapply(tfs_tissues, function(each_tft){
#   one_ex <- glue('/project2/haky/temi/projects/TFPred-snakemake/output/models_eval/cistrome_AR_Breast_2023-07-27/aggByCollect_AR_Breast.logistic.rds') |> Sys.glob()
#   one_ex <- readRDS(one_ex)
#   roc_object <- roc(one_ex[[1]]$class, one_ex[[1]]$prediction_response)
#   auc(roc_object)[1]
# })

# names(evaluations) <- tfs_tissues
# evaluations <- do.call('cbind', evaluations)
# evaluations
```

```{r}
# x <- barplot(evaluations, horiz=FALSE, xaxt = "n", col='steelblue', ylab='AUC', xlab='TF-tissue model', cex.lab=1, )
# text(x, par("usr")[3] - 0.03, cex=0.9, labels = colnames(evaluations), xpd=TRUE, srt=15)
# text(x, evaluations[1, ] - 0.1, labels=round(evaluations[1, ], 3),cex=0.8)
# mtext('AUCs of different models evaluated on respective test sets', side = 3, line = 1, outer = FALSE, at = NA, adj = 0, padj = NA, cex = 1.5)

```


